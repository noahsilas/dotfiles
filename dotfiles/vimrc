set nocompatible

" my preferred leader key. Set this first so if things are binding to leader
" they bind to my leader instead of the default.
let mapleader = ","

" Load plugins
call plug#begin('~/.vim/plugged')
Plug 'Raimondi/delimitMate'
Plug 'chriskempson/base16-vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'dense-analysis/ale'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'leafgarland/typescript-vim' " TypeScript syntax
call plug#end()

" set up colors
set background=dark
colorscheme base16-eighties

" search options
set ignorecase " make / searches case insensitive
set smartcase " (unless they contain a capital)
set hlsearch " highlight search results
" <leader><space> to clear search
nnoremap <leader><space> :let @/=''<cr>

" tab settings
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2

" indent settings
set smartindent

syntax on

set showmode
set showcmd
set visualbell
set hidden       " enables better buffer support
set showmatch    " show matching parens
set nowrap

" make command completion more like readline
set wildmode=list:longest

" Invisible Characters
set list
set listchars=tab:>.,trail:.,extends:#,nbsp:.
noremap <Leader>i :set list!<CR> " Toggle invisible chars

" map ; to : for the quickness
nnoremap ; :

" exchange ` and '
nnoremap ' `
nnoremap ` '

" Remove trailing whitespace on save
" (except when editing `diffs`, which sometimes require trailing whitespace)
autocmd BufWritePre * if &ft != 'diff' | :%s/\s\+$//e

" Use `s' to insert a Single character
nnoremap s :exec "normal i".nr2char(getchar())."\e"<CR>

if has("mouse")
  set mouse=a
endif

" show line numbers
set nu

" show a little more context than the sensible.vim default
set scrolloff=3

"syntax highlighting for erb files
autocmd BufRead,BufNewFile *.erb set filetype=eruby.html

" enable spellcheck in commit messages
au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell

" convert hashrockets to ruby 1.9 syntax
nmap <leader>rh :%s/\v(:)@<!:([a-zA-Z_][a-zA-Z_0-9]*)(\s*)\=\>\s?/\2:\3/gc<cr>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" ignore existing swapfile warning
set shortmess+=A

" No splash screen
set shortmess+=I

" highlight the wrap column and column 100 (Brigade hard line length limit)
if exists('+colorcolumn')
  set colorcolumn=+0,100
endif

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Pretty it up a little
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'

" add an easy way to leave insert mode
imap jj <Esc>

" testing airline
set laststatus=2
set noshowmode
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1
" Default lightning emoji doesn't render nicely in iterm2
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.dirty = ' ⌁'


" skip node_modules directory when searching
set wildignore+=*/node_modules,*/coverage

" Enable JS Flow support
let g:javascript_plugin_flow = 1

" add fzf hotkeys
noremap <leader>t :GFiles<cr>
noremap <leader>b :Buffers<cr>

" shortcut to put the contents of a buffer into my clipboard (to make it
" easier to type something out in vim and then paste it into something like a
" web form)
noremap <leader>y :%w !pbcopy -<cr><cr>

" Trigger ALE hover info manually (since I am not using the mouse hover)
noremap <leader>h :ALEHover<cr>

" Prettier config
let g:prettier#autoformat_config_present = 1 " Only autoformat with prettier if a config is present
let g:prettier#autoformat_require_pragma = 0 " Allow autoformatting files without @prettier tag
let g:prettier#config#config_precedence = 'prefer-file' " use config file settings
let g:prettier#quickfix_auto_focus = 0 " Don't autofocus on quickfix when errors occur

runtime hustle.vim

" Add `Find` function that populates quickfix list
function! Find(command)
  cexpr system("ag --column " . a:command)
  cw
endfunction

command! -nargs=+ -complete=file Find call Find(<q-args>)
